using DLCS.Client.Hydra;
using DLCS.Client.Hydra.Model;
using Newtonsoft.Json;

namespace DLCS.Client.Model
{
    [HydraClass(typeof(AuthServiceClass),
        Description = "IIIF Autheintication Service configuration. The DLCS provides the " 
                    + "service, but may need to delegate to your endpoints to acquire roles.",
        UriTemplate = "/customers/{0}/authServices/{1}")]
    public class AuthService : DlcsResource
    {
        [JsonIgnore]
        public string ModelId { get; set; }
        [JsonIgnore]
        public int CustomerId { get; set; }

        public AuthService() { }

        public AuthService(int customerId, string serviceId, string name, string profile, int ttl,
            string label, string description, string pageLabel, string pageDescription, string callToAction)
        {
            CustomerId = customerId;
            ModelId = serviceId;
            Name = name;
            Profile = profile;
            TimeToLive = ttl;
            Label = label;
            Description = description;
            PageLabel = pageLabel;
            PageDescription = pageDescription;
            CallToAction = callToAction;
            Init(true, customerId, ModelId);
        }
        
        [RdfProperty(Description = "Name of service",
            Range = Names.XmlSchema.String, ReadOnly = false, WriteOnly = false)]
        [JsonProperty(Order = 11, PropertyName = "name")]
        public string Name { get; set; }

        [RdfProperty(Description = "IIIF profile",
            Range = Names.XmlSchema.String, ReadOnly = false, WriteOnly = false)]
        [JsonProperty(Order = 12, PropertyName = "profile")]
        public string Profile { get; set; }

        [RdfProperty(Description = "Label that appears in IIIF model",
            Range = Names.XmlSchema.String, ReadOnly = false, WriteOnly = false)]
        [JsonProperty(Order = 13, PropertyName = "label")]
        public string Label { get; set; }

        [RdfProperty(Description = "Description that appears in IIIF model",
            Range = Names.XmlSchema.String, ReadOnly = false, WriteOnly = false)]
        [JsonProperty(Order = 14, PropertyName = "description")]
        public string Description { get; set; }

        [RdfProperty(Description = "Label that appears on pages generated by DLCS",
            Range = Names.XmlSchema.String, ReadOnly = false, WriteOnly = false)]
        [JsonProperty(Order = 15, PropertyName = "pageLabel")]
        public string PageLabel { get; set; }

        [RdfProperty(Description = "Description that appears on pages generated by DLCS",
            Range = Names.XmlSchema.String, ReadOnly = false, WriteOnly = false)]
        [JsonProperty(Order = 16, PropertyName = "pageDescription")]
        public string PageDescription { get; set; }

        [RdfProperty(Description = "Label of button used on pages generated by DLCS (or clickthrough)",
            Range = Names.XmlSchema.String, ReadOnly = false, WriteOnly = false)]
        [JsonProperty(Order = 17, PropertyName = "callToAction")]
        public string CallToAction { get; set; }

        [RdfProperty(Description = "How long a cookie session and bearer token are valid for (seconds)",
            Range = Names.XmlSchema.NonNegativeInteger, ReadOnly = false, WriteOnly = false)]
        [JsonProperty(Order = 18, PropertyName = "timeToLive")]
        public int TimeToLive { get; set; }

        [HydraLink(Description = "Child auth services of a parent (relationship between login and token,logout)",
            Range = Names.Hydra.Collection, ReadOnly = true, WriteOnly = false)]
        [JsonProperty(Order = 21, PropertyName = "nestedServices")]
        public string NestedServices { get; set; }

        [HydraLink(Description = "External service that can be used by the DLCS to acquire roles for user sessions",
            Range = "vocab:RoleProvider", ReadOnly = true, WriteOnly = false)]
        [JsonProperty(Order = 22, PropertyName = "roleProvider")]
        public string RoleProvider { get; set; }
    }

    public class AuthServiceClass : Class
    {
        public AuthServiceClass()
        {
            BootstrapViaReflection(typeof(AuthService));
        }

        public override void DefineOperations()
        {
            string operationId = "_:customer_authService_";

            SupportedOperations = CommonOperations.GetStandardResourceOperations(
                operationId, "Auth Service", Id,
                "GET", "PUT", "PATCH", "DELETE");

            GetHydraLinkProperty("nestedServices").SupportedOperations = CommonOperations
                .GetStandardCollectionOperations(operationId + "nestedService_", "Nested Auth Service", "vocab:AuthService");
   
            GetHydraLinkProperty("roleProvider").SupportedOperations = CommonOperations
                .GetStandardResourceOperations(operationId + "roleProvider_", "Role Provider", "vocab:Role",
                "GET");
        }
    }
}
